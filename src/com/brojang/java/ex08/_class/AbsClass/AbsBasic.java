package com.brojang.java.ex08._class.AbsClass;

public class AbsBasic {
    // 설계와 추상화

    /**
     * 설계를 통해 전체적인 그림을 그리고 추상화를 통해 대략적으로 스펙 정의
     *
     * 일반적으로 순차지향 프로그래밍에서 이런 추상 개념이 존재하지 않음
     *
     * 함수형 프로그래밍 언어나 스크립트 코드의 경우에도 추상에 대한 개념이 존재하지 않음
     *
     * 프로그램이 복잡해지고 구성 기능이 다각화가 이루어지면서 해당 기능을 설계하는 설계 객체가 점점 부각되기 시작하는데 객체 지향형 언어를 기준으로 등장
     *
     * 자바도 이런 추상화를 제공하면서 프로그래머들의 공동 개발을 용이하게 하고 빠른 속도로 개발할 수 있게 조력
     *
     */

    // 추상 클래스, 인터페이스
    /**
     *    - 추상 클래스 :  부분 추상 클래스
     *    => 일반적인 클래스와 동일하지만 클래스의 접근 제한자의 뒤쪽과 추상 메서드의 접근 제한자 뒤에 abstract 키워드를 붙여서 추상메서드 표시
     *    => 추상 메서드는 기능이 존재하지 않음. 해당 기능에 대한 스펙(접근제어자, 리턴타입, 메서드명, 매개변수)만 가지고 있음
     *    => 관련 클래스를 상속 받은 클래스에 강제로 오버라이딩 해서 선언하게 하는 기능을 가짐
     *
     *    - 인터페이스 : 완전 추상 클래스
     *    => 클래스 선언부에 class 대신 interface라는 키워드가 들어감
     *    => 기능이 정의된 메서드는 디폴트 메서드와 스태틱 메서드 외에 존재 X
     *    일반 메서드가 없고 추상메서드만 존재
     *
     *    => 인터페이스로는 인스턴스 선언 불가. 상속을 받은 클래스를 선언 후 사용
     *    => 인터페이스는 일반 클래스아 달리 다중 상속 가능. 일반 클래스에서 상속 받을 시 implements 키워드 사용
     *    => 인터페이스는 완전 추상을 통해 해당 클래스의 스펙만 제공하고 그외의 역할을 하지 않음
     *    => 다형성에서 하나의 타입으로 여러 개의 객체를 선언 시 해당 타입이 되는 것이 바로 인터페이스
     *
     */

    // 어노테이션
    /*
    * 일반적으로 메모의 기능, 알림의 기능을 가진 메타데이터
    *
    * 키와 값의 쌍으로 이루어진 알림데이터. Retention을 통해 해당 어노테이션을 어디까지 가져갈 수 있는지 결정 가능
    * -> 기존보다 더 다양한 일을 할 수 있음
    *
    * 프레임워크나 자사 솔루션에서 해당 어노테이션의 동작 정의를 하게됨으로써 사용자들이 어노테이션을 통한 기능 개발이 가능하게 가능
    *
    * 어노테이션은 인터페이스 계열로 일반적인 기능을 가지고 있지 않다.
    *
    * 하지만 일반 클래스에서 관련 어노테이션을 읽어 메서드의 로직 전후에 전처리, 후처리가 가능
    *
    * 기존 공통 기능을 어노테이션을 통해 구현.
    *
    * 핵심 기능을 별도로 개발하게끔 어노테이션을 통해 Spring에서 지원
    * */
}
